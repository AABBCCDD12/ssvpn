import com.android.build.OutputFile
import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def getCurrentFlavor() {
    String task = getGradle().getStartParameter().getTaskRequests().toString()
    Matcher matcher = Pattern.compile("(assemble|generate)\\w*(Release|Debug)").matcher(task)
    if (matcher.find()) return matcher.group(2).toLowerCase() else {
        println "Warning: No match found for $task"
        return "debug"
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    archivesBaseName = "android"
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.sdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs rootProject.resConfigs
    }
    flavorDimensions "encryption"
    productFlavors {
        ssvpn {
            dimension "encryption"
            applicationId "free.shadowsocks.proxy.VPN"
            resValue 'string', 'applicationId', applicationId
        }
        v2vpn {
            dimension "encryption"
            applicationId "free.v2ray.proxy.VPN"
            resValue 'string', 'applicationId', applicationId
        }
        v2free {
            dimension "encryption"
            applicationId "v2free.app"
            resValue 'string', 'applicationId', applicationId
        }
    }
    sourceSets {
        ssvpn.setRoot('src/ssvpn')
        v2vpn.setRoot('src/v2vpn')
        v2free.setRoot('src/v2free')
    }

    buildTypes {
        debug {
            pseudoLocalesEnabled true
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }

    signingConfigs {
        config {
            enableV3Signing true
            enableV4Signing false
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    externalNativeBuild {
        ndkBuild {
            path file('src/main/cpp/Android.mk')
        }
    }
    kotlinOptions.jvmTarget = javaVersion

    packagingOptions {
        exclude '/META-INF/*.version'
        exclude '**/*.kotlin_*'
        exclude '/*.bin'
    }
    dependenciesInfo.includeInApk false
    splits {
        abi {
            enable true
            universalApk true
        }
    }
    buildToolsVersion '30.0.2'
    ndkVersion '21.0.6113669'

    sourceSets.main.jniLibs.srcDirs +=
            new File(project(':core').buildDir, "intermediates/bundles/${getCurrentFlavor()}/jni")
}

androidExtensions {
    experimental = true
}

dependencies {
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$desugarLibsVersion"
    implementation project(':core')
    implementation 'androidx.browser:browser:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.firebase:firebase-ads:19.7.0'
    implementation 'com.google.zxing:core:3.4.0'
    implementation 'com.takisoft.preferencex:preferencex-simplemenu:1.1.0'
    implementation 'com.twofortyfouram:android-plugin-api-for-locale:1.0.4'
    implementation 'me.zhanghai.android.fastscroll:library:1.1.3'
    implementation 'xyz.belvi.mobilevision:barcodescanner:2.0.3'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

}
repositories {
    mavenCentral()
}


ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
if (getCurrentFlavor() == 'release') android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def offset = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (offset != null) output.versionCodeOverride = variant.versionCode + offset
    }
}
